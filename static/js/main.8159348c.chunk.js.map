{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","changeVisitedState","isVisited","state","setState","changeWallState","console","log","isWall","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","row","this","props","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","pop","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Heuristic","Math","abs","insertNewNode","arr","i","f","splice","PathfindingVisualizer","mouseIsPressed","wallToggle","selectedAlgorithm","movingStart","movingFinish","pathInProgress","clearGrid","cancelPathAnimation","cancelShortestPathAnimation","startPos","finishPos","getInitialGrid","moveStart","moveFinish","ClearPreviousVisualization","AddWall","document","getElementById","nodesInShortestPathOrder","timeoutPath","clearTimeout","visualizeAlgorithm","setTimeout","animateShortestPath","timeoutShortestPath","openSet","g","current","shift","tentative_gScore","tentative_fScore","astar","currentNode","unshift","getNodesInShortestPathOrder","animateSearch","Navbar","bg","expand","Container","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","ClearGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8159348c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      col:0,\r\n      isFinish:false,\r\n      isStart:false,\r\n      isWall:false,\r\n      isVisited:false,\r\n      onMouseDown:null,\r\n      onMouseEnter:null,\r\n      onMouseUp:null,\r\n      row:0,\r\n    };\r\n  }\r\n\r\n\r\n  changeVisitedState = () => {\r\n    const {isVisited} = this.state;\r\n    this.setState({isVisited: !isVisited});\r\n  }\r\n\r\n  changeWallState = () => {\r\n    console.log(true);\r\n    const {isWall} = this.state;\r\n    this.setState({isWall: !isWall});\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isVisited,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : isVisited\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  \r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.pop();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeB.distance - nodeA.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs A* algorithm. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function astar(grid, startNode, finishNode) {\r\n\r\n  const visitedNodesInOrder = [];\r\n  const openSet = [];\r\n  startNode.g = 0;\r\n  startNode.f = 0;\r\n  openSet.push(startNode);\r\n\r\n  while (!!openSet.length) {\r\n    // This operation can occur in O(1) time if openSet is a min-heap or a priority queue\r\n    sortNodesByFScore(openSet); \r\n    const current = openSet.shift();\r\n    \r\n    // If we encounter a wall, we skip it.\r\n    if (current.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (current.g === Infinity) return visitedNodesInOrder;\r\n    if (current === finishNode) return visitedNodesInOrder;\r\n\r\n    visitedNodesInOrder.push(current);\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(current, grid);\r\n\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        // tentative_gScore is the distance from start to the neighbor through current\r\n        const tentative_gScore = current.g + 1;\r\n        const tentative_fScore = tentative_gScore + Heuristic(neighbor, finishNode);\r\n        if (tentative_gScore <= neighbor.g) {\r\n            // This path to neighbor is better than any previous one. Record it!\r\n            if (neighbor.g === Infinity) insertNewNode(neighbor, openSet);\r\n            \r\n            neighbor.previousNode = current;\r\n            neighbor.g = tentative_gScore;\r\n            neighbor.f = tentative_fScore;\r\n        }   \r\n      }\r\n    }\r\n  }\r\n\r\n  function Heuristic(neighbor, finishNode) {\r\n    /* Manhattan Distance since we are only allowed to move in 4 directions\r\n       Multiplied by constant to reduce nodes searched */\r\n    return Math.abs(neighbor.row - finishNode.row) + Math.abs(neighbor.col - finishNode.col);\r\n  }\r\n  \r\n  function sortNodesByFScore(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\r\n  }\r\n\r\n  function insertNewNode(node, arr) {\r\n    /* Insert node into array based on f score (sorted in ascending order) */\r\n    if (!arr.length) {\r\n      arr.push(node);\r\n      return;\r\n    }\r\n    for (var i = 0; i < arr.length; i++) {\r\n      /* if (node = arr[i]) {\r\n        arr.splice(i, 0, node);\r\n      } */\r\n      if (node.f >= arr[i].f) {\r\n        arr.splice(i, 0, node);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, {Component} from 'react';\r\nimport {Navbar, Container, Nav, NavDropdown} from 'react-bootstrap';\r\n\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {astar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 65;\r\nconst GRID_ROWS = 37;\r\nconst GRID_COLS = 80;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      wallToggle: false,\r\n      selectedAlgorithm: \"Dijkstra\",\r\n      movingStart: false,\r\n      movingFinish: false,\r\n    };\r\n    this.pathInProgress = false;\r\n    this.clearGrid = false;\r\n    this.cancelPathAnimation = false;\r\n    this.cancelShortestPathAnimation = false;\r\n\r\n    this.movingStart = false;\r\n    this.movingFinish = false;\r\n    this.startPos = [START_NODE_ROW, START_NODE_COL]; // Storing in state kills performance :(\r\n    this.finishPos = [FINISH_NODE_ROW, FINISH_NODE_COL]\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid(this.startPos, this.finishPos);\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.pathInProgress) {\r\n      /* If user clicks on start or finish they are moving it */\r\n      const moveStart = true ? this.state.grid[row][col].isStart : false;\r\n      const moveFinish = true ? this.state.grid[row][col].isFinish : false;\r\n      if (moveStart) {\r\n        this.startPos = [row, col];\r\n        this.ClearPreviousVisualization();\r\n        this.setState({mouseIsPressed: true, movingStart: true});\r\n      }\r\n      else if (moveFinish) {\r\n        this.finishPos = [row, col];\r\n        this.ClearPreviousVisualization();\r\n        this.setState({mouseIsPressed: true, movingFinish: true});\r\n      }\r\n      else {\r\n        /* Otherwise they are placing a wall */\r\n        const wallToggle = true ? this.state.grid[row][col].isWall : false; // Place or erase wall (false = place)\r\n        this.ClearPreviousVisualization();\r\n        AddWall(this.state.grid, row, col, wallToggle);\r\n        this.setState({mouseIsPressed: true, wallToggle:wallToggle});\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    if (this.state.movingStart) {\r\n      if (!this.state.grid[row][col].isStart) {\r\n        if (!this.clearGrid) this.ClearPreviousVisualization();\r\n\r\n        const {grid} = this.state;\r\n        grid[row][col].isStart = true;\r\n        grid[this.startPos[0]][this.startPos[1]].isStart = false;\r\n        document.getElementById(`node-${row}-${col}`).className = 'node node-start';\r\n        document.getElementById(`node-${this.startPos[0]}-${this.startPos[1]}`).className = 'node';\r\n        this.startPos = [row, col];\r\n      }\r\n    }\r\n    else if (this.state.movingFinish) {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        if (!this.clearGrid) this.ClearPreviousVisualization();\r\n  \r\n        const {grid} = this.state;\r\n        grid[row][col].isFinish = true;\r\n        grid[this.finishPos[0]][this.finishPos[1]].isFinish = false;\r\n\r\n        document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\r\n        document.getElementById(`node-${this.finishPos[0]}-${this.finishPos[1]}`).className = 'node';\r\n        this.finishPos = [row, col];\r\n      }\r\n    }\r\n    else {\r\n      AddWall(this.state.grid, row, col, this.state.wallToggle);\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    /* Stops user moving nodes or placing walls during visualization */\r\n    if (!this.pathInProgress) {\r\n      const {grid} = this.state;\r\n      this.setState({grid, mouseIsPressed: false, movingStart: false, movingFinish: false}); // Set state only on mouse release to reduce lag\r\n    }\r\n  }\r\n\r\n  animateSearch(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (this.cancelPathAnimation) {\r\n        this.clearGrid = false;\r\n        this.pathInProgress = false;\r\n        this.cancelPathAnimation = false;\r\n        this.cancelShortestPathAnimation = true;\r\n        while (this.timeoutPath) {\r\n          clearTimeout(this.timeoutPath); // cancels all timeouts/animations, will do nothing if no timeout with id is present\r\n          this.timeoutPath--;\r\n        }\r\n        this.visualizeAlgorithm();\r\n        return;\r\n      }\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n          this.clearGrid = false;\r\n          this.pathInProgress = false;\r\n        }, 3 * i);\r\n        return;\r\n      }\r\n      const node = visitedNodesInOrder[i];\r\n      if (!node.isStart && !node.isFinish){\r\n        this.timeoutPath = setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n        }, 3 * i);\r\n      }\r\n    } \r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (this.cancelShortestPathAnimation) {\r\n        while (this.timeoutShortestPath) {\r\n          clearTimeout(this.timeoutShortestPath); // will do nothing if no timeout with id is present\r\n          this.timeoutShortestPath--;\r\n        }\r\n        this.cancelShortestPathAnimation = false;\r\n        return;\r\n      }\r\n      this.timeoutShortestPath = setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        }\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  instantAnimateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      const node = nodesInShortestPathOrder[i];\r\n      if (!node.isStart && !node.isFinish) {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path-instant';\r\n      }\r\n      \r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    const {grid} = this.state;\r\n    if (this.pathInProgress) { // already calculating a path\r\n      this.cancelPathAnimation = true;\r\n    } \r\n    if (!this.clearGrid) {\r\n      this.ClearPreviousVisualization();\r\n    }\r\n    this.pathInProgress = true;\r\n    const startNode = grid[this.startPos[0]][this.startPos[1]];\r\n    const finishNode = grid[this.finishPos[0]][this.finishPos[1]];\r\n\r\n    var visitedNodesInOrder;\r\n    if (this.state.selectedAlgorithm === \"Dijkstra\") visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    else if (this.state.selectedAlgorithm === \"A*\") visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  ClearPreviousVisualization() {\r\n    // Keeps walls in clear\r\n    const {grid} = this.state;\r\n    \r\n    for(const row of grid) {\r\n      for(const node of row) {\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\r\n        } \r\n        else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\r\n          node.distance = Infinity;\r\n          node.g = Infinity;\r\n          node.f = Infinity;\r\n          node.previousNode = null;\r\n          node.isVisited = false;\r\n        } \r\n        else if (!node.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n          node.isVisited = false;\r\n          node.distance = Infinity;\r\n          node.g = Infinity;\r\n          node.f = Infinity;\r\n          node.previousNode = null;\r\n        } \r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ClearGrid() {\r\n    var {grid} = this.state;\r\n    for(const row of grid) {\r\n      for(const node of row) {\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\r\n        } \r\n        else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\r\n        } \r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n        }\r\n      }\r\n    }\r\n    grid = getInitialGrid(this.startPos, this.finishPos);\r\n    this.pathInProgress = false;\r\n    this.clearGrid = true;\r\n    this.setState({grid});\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Container>\r\n            <h1 id=\"title\">Pathfinder</h1>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"me-auto\">\r\n                <NavDropdown title={this.state.selectedAlgorithm} id=\"basic-nav-dropdown\">\r\n                  <NavDropdown.Item onClick={() => this.setState({selectedAlgorithm:\"Dijkstra\"})}>Dijkstras</NavDropdown.Item>\r\n                  <NavDropdown.Item onClick={() => this.setState({selectedAlgorithm:\"A*\"})}>A*</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <button className=\"Navbar-button\" onMouseDown={() => this.visualizeAlgorithm()}>Visualize</button>\r\n                <button className=\"Navbar-button\" onMouseDown={() => this.ClearGrid()}>Clear Grid</button>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Navbar>\r\n\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"grid-row\" key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall, isVisited, f, g} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                      f={f}\r\n                      g={g}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (startPos, finishPos) => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_ROWS; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_COLS; col++) {\r\n      currentRow.push(createNode(col, row, startPos, finishPos));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, startPos, finishPos) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === startPos[0] && col === startPos[1],\r\n    isFinish: row === finishPos[0] && col === finishPos[1],\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    f: Infinity,\r\n    g: Infinity,\r\n  };\r\n};\r\n\r\nconst AddWall = (grid, row, col, wallToggle) => {\r\n  if (!wallToggle) {\r\n    document.getElementById(`node-${row}-${col}`).className = 'node node-wall';\r\n  } else {\r\n    document.getElementById(`node-${row}-${col}`).className = 'node';\r\n  }\r\n  grid[row][col].isWall = !wallToggle;  \r\n};","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}