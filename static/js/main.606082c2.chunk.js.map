{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","changeVisitedState","isVisited","state","setState","changeWallState","console","log","isWall","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","row","this","props","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","astar","g","h","Math","sqrt","PathfindingVisualizer","mouseIsPressed","wallToggle","selectedAlgorithm","pathInProgress","clearGrid","cancelPath","getInitialGrid","AddWall","nodesInShortestPathOrder","i","timeoutPath","setTimeout","animateShortestPath","visualizeAlgorithm","timeout","document","getElementById","ClearPreviousVisualization","currentNode","unshift","getNodesInShortestPathOrder","animateSearch","Navbar","bg","expand","Container","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","ClearGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.606082c2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      col:0,\r\n      isFinish:false,\r\n      isStart:false,\r\n      isWall:false,\r\n      isVisited:false,\r\n      onMouseDown:null,\r\n      onMouseEnter:null,\r\n      onMouseUp:null,\r\n      row:0,\r\n    };\r\n  }\r\n\r\n\r\n  changeVisitedState = () => {\r\n    const {isVisited} = this.state;\r\n    this.setState({isVisited: !isVisited});\r\n  }\r\n\r\n  changeWallState = () => {\r\n    console.log(true);\r\n    const {isWall} = this.state;\r\n    this.setState({isWall: !isWall});\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isVisited,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : isVisited\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs A* algorithm. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function astar(grid, startNode, finishNode) {\r\n\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n\r\n      updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        const g = node.distance + 1;\r\n        const h =  Math.sqrt((finishNode.row - neighbor.row) ** 2 + (finishNode.col - neighbor.col) ** 2);\r\n        neighbor.distance = g + h;\r\n        neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, {Component} from 'react';\r\nimport {Navbar, Container, Nav, NavDropdown} from 'react-bootstrap';\r\n\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {astar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 65;\r\nconst GRID_ROWS = 37;\r\nconst GRID_COLS = 80;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      wallToggle: false,\r\n      selectedAlgorithm: \"Dijkstra\",\r\n    };\r\n    this.pathInProgress = false;\r\n    this.clearGrid = false;\r\n    this.cancelPath = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const wallToggle = true ? this.state.grid[row][col].isWall : false; // Place or erase wall (false = place)\r\n    AddWall(this.state.grid, row, col, wallToggle);\r\n    this.setState({mouseIsPressed: true, wallToggle:wallToggle});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    AddWall(this.state.grid, row, col, this.state.wallToggle);\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const {grid} = this.state;\r\n    this.setState({grid, mouseIsPressed: false}); // Set state only on mouse release to reduce lag\r\n  }\r\n\r\n  animateSearch(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        this.timeoutPath =setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n          if (this.cancelPath) {\r\n            this.clearGrid = false;\r\n            this.pathInProgress = false;\r\n            this.cancelPath = false;\r\n            this.visualizeAlgorithm();\r\n            return;\r\n          }\r\n          this.clearGrid = false;\r\n          this.pathInProgress = false;\r\n        }, 3 * i);\r\n        return;\r\n      }\r\n      const node = visitedNodesInOrder[i];\r\n      if (!node.isStart && !node.isFinish){\r\n        this.timeout = setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n        }, 3 * i);\r\n      }\r\n      \r\n    } \r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    const {grid, pathInProgress, clearGrid} = this.state;\r\n    if (this.pathInProgress) { // already calculating a path\r\n      this.cancelPath = true;\r\n      //return;\r\n    } \r\n    if (!this.clearGrid) {\r\n      this.ClearPreviousVisualization();\r\n    }\r\n    this.pathInProgress = true;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n    var visitedNodesInOrder = [];\r\n    if (this.state.selectedAlgorithm === \"Dijkstra\") visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    else if (this.state.selectedAlgorithm === \"A*\") visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  ClearPreviousVisualization() {\r\n    // Keeps walls in clear\r\n    const {grid} = this.state;\r\n    for(const row of grid) {\r\n      for(const node of row) {\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\r\n        } \r\n        else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\r\n          node.distance = Infinity;\r\n          node.previousNode = null;\r\n          node.isVisited = false;\r\n        } \r\n        else if (!node.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n          node.isVisited = false;\r\n          node.distance = Infinity;\r\n          node.previousNode = null;\r\n        } \r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ClearGrid() {\r\n    var {grid} = this.state;\r\n    for(const row of grid) {\r\n      for(const node of row) {\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\r\n        } \r\n        else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\r\n        } \r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n        }\r\n      }\r\n    }\r\n    grid = getInitialGrid();\r\n    this.pathInProgress = false;\r\n    this.clearGrid = true;\r\n    this.setState({grid});\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Container>\r\n            {/* <Navbar.Brand>Pathfinder</Navbar.Brand> */}\r\n            <h1 id=\"title\">Pathfinder</h1>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"me-auto\">\r\n                <NavDropdown title={this.state.selectedAlgorithm} id=\"basic-nav-dropdown\">\r\n                  <NavDropdown.Item onClick={() => this.setState({selectedAlgorithm:\"Dijkstra\"})}>Dijkstras</NavDropdown.Item>\r\n                  <NavDropdown.Item onClick={() => this.setState({selectedAlgorithm:\"A*\"})}>A*</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <button className=\"Navbar-button\" onMouseDown={() => this.visualizeAlgorithm()}>Visualize</button>\r\n                <button className=\"Navbar-button\" onMouseDown={() => this.ClearGrid()}>Clear Grid</button>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Navbar>\r\n\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"grid-row\" key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall, isVisited} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_ROWS; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_COLS; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst AddWall = (grid, row, col, wallToggle) => {\r\n  if (!wallToggle) {\r\n    document.getElementById(`node-${row}-${col}`).className = 'node node-wall';\r\n  } else {\r\n    document.getElementById(`node-${row}-${col}`).className = 'node';\r\n  }\r\n  grid[row][col].isWall = !wallToggle;  \r\n};","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}